// Generated by CoffeeScript 1.10.0
(function() {
  var actionTypes, expect, notes;

  expect = require('chai').expect;

  notes = require('../../js/reducers/Notes.js');

  actionTypes = require('../../js/constants/actionTypes');

  describe('Notes reducer', function() {
    describe('initial load', function() {
      return it('should return an array with one empty note', function() {
        return expect(notes(void 0, {})).to.eql([
          {
            text: '',
            title: ''
          }
        ]);
      });
    });
    describe('unrecognized @action', function() {
      return it('should return the previous value', function() {
        return expect(notes(['test'], {
          type: 'NOOP'
        })).to.eql(['test']);
      });
    });
    return describe('recognized @actions', function() {
      beforeEach(function() {
        return this.input = [
          {
            text: 'original',
            title: 'original_title'
          }
        ];
      });
      describe('TEXT_CHANGED', function() {
        beforeEach(function() {
          return this.action = {
            type: actionTypes.TEXT_CHANGED,
            payload: {
              noteId: 0,
              text: 'new'
            }
          };
        });
        return it('should update the note\'s text', function() {
          return expect(notes(this.input, this.action)).to.eql([
            {
              text: 'new',
              title: 'original_title'
            }
          ]);
        });
      });
      describe('NOTE_CREATED', function() {
        beforeEach(function() {
          return this.action = {
            type: actionTypes.NOTE_CREATED
          };
        });
        return it('should append a new note to the end of the list', function() {
          return expect(notes(this.input, this.action)).to.eql([
            {
              text: 'original',
              title: 'original_title'
            }, {
              text: '',
              title: ''
            }
          ]);
        });
      });
      describe('TITLE_CHANGED', function() {
        beforeEach(function() {
          return this.action = {
            type: actionTypes.TITLE_CHANGED,
            payload: {
              noteId: 0,
              title: 'new_title'
            }
          };
        });
        return it('should update the note\'s title', function() {
          return expect(notes(this.input, this.action)).to.eql([
            {
              text: 'original',
              title: 'new_title'
            }
          ]);
        });
      });
      return describe('NOTE_DELETED', function() {
        beforeEach(function() {
          return this.action = {
            type: actionTypes.NOTE_DELETED,
            payload: {
              noteId: 0
            }
          };
        });
        return it('should remove the note', function() {
          return expect(notes(this.input, this.action)).to.eql([]);
        });
      });
    });
  });

}).call(this);
